// <auto-generated />
using System;
using IDGenWebsite.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace IDGenWebsite.Migrations
{
    [DbContext(typeof(SchoolContext))]
    partial class SchoolContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AcademicSessionsClasses", b =>
                {
                    b.Property<Guid>("AcademicSessionsSessionSourcedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassesClassSourcedId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AcademicSessionsSessionSourcedId", "ClassesClassSourcedId");

                    b.HasIndex("ClassesClassSourcedId");

                    b.ToTable("AcademicSessionsClasses");
                });

            modelBuilder.Entity("IDGenWebsite.Models.AcademicSessions", b =>
                {
                    b.Property<Guid>("SessionSourcedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateLastModified")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("Parent_SourcedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SchoolYear")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SessionSourcedId");

                    b.HasIndex("Parent_SourcedId");

                    b.ToTable("AcademicSessions");
                });

            modelBuilder.Entity("IDGenWebsite.Models.Classes", b =>
                {
                    b.Property<Guid>("ClassSourcedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClassCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClassType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CourseSourcedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateLastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SchoolOrgSourcedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClassSourcedId");

                    b.HasIndex("CourseSourcedId");

                    b.HasIndex("SchoolOrgSourcedId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("IDGenWebsite.Models.Courses", b =>
                {
                    b.Property<Guid>("CourseSourcedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CourseCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateLastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("OrganizationOrgSourcedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SchoolYearSessionSourcedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourseSourcedId");

                    b.HasIndex("OrganizationOrgSourcedId");

                    b.HasIndex("SchoolYearSessionSourcedId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("IDGenWebsite.Models.Enrollments", b =>
                {
                    b.Property<Guid>("EnrollmentSourcedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ClassSourcedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateLastModified")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Primary")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SchoolOrgSourcedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserSourcedId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EnrollmentSourcedId");

                    b.HasIndex("ClassSourcedId");

                    b.HasIndex("SchoolOrgSourcedId");

                    b.HasIndex("UserSourcedId");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("IDGenWebsite.Models.Grades", b =>
                {
                    b.Property<Guid>("GradeSourcedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClassesClassSourcedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CourseSourcedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserSourcedId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GradeSourcedId");

                    b.HasIndex("ClassesClassSourcedId");

                    b.HasIndex("CourseSourcedId");

                    b.HasIndex("UserSourcedId");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("IDGenWebsite.Models.IDRequestModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatePrinted")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasBeenPrinted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("StudentID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("IDRequests");
                });

            modelBuilder.Entity("IDGenWebsite.Models.IdTemplate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BackBottomColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BackInfoLineOne")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BackInfoLineThree")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BackInfoLineTwo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BackMiddleColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BackTopColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BackTopLabel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FrontBottomColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FrontMiddleColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FrontTopColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FrontTopLabel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LogoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TemplateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("IdTemplates");
                });

            modelBuilder.Entity("IDGenWebsite.Models.Metadatas", b =>
                {
                    b.Property<Guid>("MetadataSourcedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AcademicSessionsSessionSourcedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClassesClassSourcedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CourseSourcedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EnrollmentSourcedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OrganizationsOrgSourcedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ResourceSourcedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserSourcedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MetadataSourcedId");

                    b.HasIndex("AcademicSessionsSessionSourcedId");

                    b.HasIndex("ClassesClassSourcedId");

                    b.HasIndex("CourseSourcedId");

                    b.HasIndex("EnrollmentSourcedId");

                    b.HasIndex("OrganizationsOrgSourcedId");

                    b.HasIndex("ResourceSourcedId");

                    b.HasIndex("UserSourcedId");

                    b.ToTable("Metadatas");
                });

            modelBuilder.Entity("IDGenWebsite.Models.Organizations", b =>
                {
                    b.Property<Guid>("OrgSourcedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateLastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Identifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("Parent_SourcedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrgSourcedId");

                    b.HasIndex("Parent_SourcedId");

                    b.ToTable("Orgs");
                });

            modelBuilder.Entity("IDGenWebsite.Models.Periods", b =>
                {
                    b.Property<Guid>("PeriodSourcedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClassesClassSourcedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PeriodSourcedId");

                    b.HasIndex("ClassesClassSourcedId");

                    b.ToTable("Periods");
                });

            modelBuilder.Entity("IDGenWebsite.Models.Resources", b =>
                {
                    b.Property<Guid>("ResourceSourcedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ClassesClassSourcedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CourseSourcedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateLastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Importance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VendorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VendorResourceId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ResourceSourcedId");

                    b.HasIndex("ClassesClassSourcedId");

                    b.HasIndex("CourseSourcedId");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("IDGenWebsite.Models.SettingModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("SettingDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SettingName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SettingValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("IDGenWebsite.Models.SubjectCodes", b =>
                {
                    b.Property<Guid>("SubjectCodeSourcedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClassesClassSourcedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CourseSourcedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SubjectCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubjectCodeSourcedId");

                    b.HasIndex("ClassesClassSourcedId");

                    b.HasIndex("CourseSourcedId");

                    b.ToTable("SubjectCodes");
                });

            modelBuilder.Entity("IDGenWebsite.Models.Subjects", b =>
                {
                    b.Property<Guid>("SubjectSourcedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClassesClassSourcedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CourseSourcedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubjectSourcedId");

                    b.HasIndex("ClassesClassSourcedId");

                    b.HasIndex("CourseSourcedId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("IDGenWebsite.Models.Users", b =>
                {
                    b.Property<Guid>("UserSourcedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateLastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EnabledUser")
                        .HasColumnType("bit");

                    b.Property<string>("FamilyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GivenName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdPicPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Identifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QrCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sms")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserSourcedId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("OrganizationsUsers", b =>
                {
                    b.Property<Guid>("OrganizationsOrgSourcedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserSourcedId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrganizationsOrgSourcedId", "UserSourcedId");

                    b.HasIndex("UserSourcedId");

                    b.ToTable("OrganizationsUsers");
                });

            modelBuilder.Entity("AcademicSessionsClasses", b =>
                {
                    b.HasOne("IDGenWebsite.Models.AcademicSessions", null)
                        .WithMany()
                        .HasForeignKey("AcademicSessionsSessionSourcedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IDGenWebsite.Models.Classes", null)
                        .WithMany()
                        .HasForeignKey("ClassesClassSourcedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IDGenWebsite.Models.AcademicSessions", b =>
                {
                    b.HasOne("IDGenWebsite.Models.AcademicSessions", "Parent")
                        .WithMany()
                        .HasForeignKey("Parent_SourcedId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("IDGenWebsite.Models.Classes", b =>
                {
                    b.HasOne("IDGenWebsite.Models.Courses", "Course")
                        .WithMany()
                        .HasForeignKey("CourseSourcedId");

                    b.HasOne("IDGenWebsite.Models.Organizations", "School")
                        .WithMany("Classes")
                        .HasForeignKey("SchoolOrgSourcedId");

                    b.Navigation("Course");

                    b.Navigation("School");
                });

            modelBuilder.Entity("IDGenWebsite.Models.Courses", b =>
                {
                    b.HasOne("IDGenWebsite.Models.Organizations", "Organization")
                        .WithMany("Courses")
                        .HasForeignKey("OrganizationOrgSourcedId");

                    b.HasOne("IDGenWebsite.Models.AcademicSessions", "SchoolYear")
                        .WithMany()
                        .HasForeignKey("SchoolYearSessionSourcedId");

                    b.Navigation("Organization");

                    b.Navigation("SchoolYear");
                });

            modelBuilder.Entity("IDGenWebsite.Models.Enrollments", b =>
                {
                    b.HasOne("IDGenWebsite.Models.Classes", "Class")
                        .WithMany("Enrollments")
                        .HasForeignKey("ClassSourcedId");

                    b.HasOne("IDGenWebsite.Models.Organizations", "School")
                        .WithMany()
                        .HasForeignKey("SchoolOrgSourcedId");

                    b.HasOne("IDGenWebsite.Models.Users", "User")
                        .WithMany("Enrollments")
                        .HasForeignKey("UserSourcedId");

                    b.Navigation("Class");

                    b.Navigation("School");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IDGenWebsite.Models.Grades", b =>
                {
                    b.HasOne("IDGenWebsite.Models.Classes", "Classes")
                        .WithMany("Grades")
                        .HasForeignKey("ClassesClassSourcedId");

                    b.HasOne("IDGenWebsite.Models.Courses", "Courses")
                        .WithMany("Grades")
                        .HasForeignKey("CourseSourcedId");

                    b.HasOne("IDGenWebsite.Models.Users", null)
                        .WithMany("Grades")
                        .HasForeignKey("UserSourcedId");

                    b.Navigation("Classes");

                    b.Navigation("Courses");
                });

            modelBuilder.Entity("IDGenWebsite.Models.Metadatas", b =>
                {
                    b.HasOne("IDGenWebsite.Models.AcademicSessions", null)
                        .WithMany("Metadata")
                        .HasForeignKey("AcademicSessionsSessionSourcedId");

                    b.HasOne("IDGenWebsite.Models.Classes", null)
                        .WithMany("Metadata")
                        .HasForeignKey("ClassesClassSourcedId");

                    b.HasOne("IDGenWebsite.Models.Courses", null)
                        .WithMany("Metadata")
                        .HasForeignKey("CourseSourcedId");

                    b.HasOne("IDGenWebsite.Models.Enrollments", null)
                        .WithMany("Metadata")
                        .HasForeignKey("EnrollmentSourcedId");

                    b.HasOne("IDGenWebsite.Models.Organizations", null)
                        .WithMany("Metadata")
                        .HasForeignKey("OrganizationsOrgSourcedId");

                    b.HasOne("IDGenWebsite.Models.Resources", null)
                        .WithMany("Metadata")
                        .HasForeignKey("ResourceSourcedId");

                    b.HasOne("IDGenWebsite.Models.Users", null)
                        .WithMany("Metadata")
                        .HasForeignKey("UserSourcedId");
                });

            modelBuilder.Entity("IDGenWebsite.Models.Organizations", b =>
                {
                    b.HasOne("IDGenWebsite.Models.Organizations", "Parent")
                        .WithMany()
                        .HasForeignKey("Parent_SourcedId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("IDGenWebsite.Models.Periods", b =>
                {
                    b.HasOne("IDGenWebsite.Models.Classes", null)
                        .WithMany("Periods")
                        .HasForeignKey("ClassesClassSourcedId");
                });

            modelBuilder.Entity("IDGenWebsite.Models.Resources", b =>
                {
                    b.HasOne("IDGenWebsite.Models.Classes", null)
                        .WithMany("Resources")
                        .HasForeignKey("ClassesClassSourcedId");

                    b.HasOne("IDGenWebsite.Models.Courses", null)
                        .WithMany("Resources")
                        .HasForeignKey("CourseSourcedId");
                });

            modelBuilder.Entity("IDGenWebsite.Models.SubjectCodes", b =>
                {
                    b.HasOne("IDGenWebsite.Models.Classes", null)
                        .WithMany("SubjectCodes")
                        .HasForeignKey("ClassesClassSourcedId");

                    b.HasOne("IDGenWebsite.Models.Courses", null)
                        .WithMany("SubjectCodes")
                        .HasForeignKey("CourseSourcedId");
                });

            modelBuilder.Entity("IDGenWebsite.Models.Subjects", b =>
                {
                    b.HasOne("IDGenWebsite.Models.Classes", null)
                        .WithMany("Subjects")
                        .HasForeignKey("ClassesClassSourcedId");

                    b.HasOne("IDGenWebsite.Models.Courses", null)
                        .WithMany("Subjects")
                        .HasForeignKey("CourseSourcedId");
                });

            modelBuilder.Entity("OrganizationsUsers", b =>
                {
                    b.HasOne("IDGenWebsite.Models.Organizations", null)
                        .WithMany()
                        .HasForeignKey("OrganizationsOrgSourcedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IDGenWebsite.Models.Users", null)
                        .WithMany()
                        .HasForeignKey("UserSourcedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IDGenWebsite.Models.AcademicSessions", b =>
                {
                    b.Navigation("Metadata");
                });

            modelBuilder.Entity("IDGenWebsite.Models.Classes", b =>
                {
                    b.Navigation("Enrollments");

                    b.Navigation("Grades");

                    b.Navigation("Metadata");

                    b.Navigation("Periods");

                    b.Navigation("Resources");

                    b.Navigation("SubjectCodes");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("IDGenWebsite.Models.Courses", b =>
                {
                    b.Navigation("Grades");

                    b.Navigation("Metadata");

                    b.Navigation("Resources");

                    b.Navigation("SubjectCodes");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("IDGenWebsite.Models.Enrollments", b =>
                {
                    b.Navigation("Metadata");
                });

            modelBuilder.Entity("IDGenWebsite.Models.Organizations", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("Courses");

                    b.Navigation("Metadata");
                });

            modelBuilder.Entity("IDGenWebsite.Models.Resources", b =>
                {
                    b.Navigation("Metadata");
                });

            modelBuilder.Entity("IDGenWebsite.Models.Users", b =>
                {
                    b.Navigation("Enrollments");

                    b.Navigation("Grades");

                    b.Navigation("Metadata");
                });
#pragma warning restore 612, 618
        }
    }
}
